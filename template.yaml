AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  step-functions-testeo

  Sample SAM Template for cosmos-report

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 512
    Timeout: 60
    Environment:
      Variables:
        funcionpredictv2: !Ref funcionpredict
        inputbucket: !Ref InputBucketName
        outputbucket: !Ref OutputBucketName
        dynamodbadsv2: !Ref ADSNamev2
        buckettrain: !Ref TrainBucketName
        StatusDataSource: !Ref StatusDataSource


Parameters:
  funcionpredict:
    Type: String
    Default: predict-fuel-v2-Predict
  InputBucketName:
    Type: String
    Default: cosmos-anglo-bronces-entrada
  OutputBucketName:
    Type: String
    Default: cosmos-anglo-bronces-salida
  ADSNamev2:
    Type: String
    Default: ADS-cosmos-anglo-v2
  TrainBucketName:
    Type: String
    Default: cosmos-anglo-bronces-train
  StatusDataSource:
    Type: String
    Default: StatusDataSource


Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Role-permisos
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AllAccessOnS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: FullOnDynamoDBO
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                  - 'dax:*'
                Resource: '*'
        - PolicyName: allowLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lambda:*
              Resource: "*"
        - PolicyName: allowAPIManage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'execute-api:ManageConnections'
              Resource: "*"

  ProcesamientoHander1:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Uno.."
      FunctionName: uno
      CodeUri: testing_cicd/
      Handler: handler.handler1
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn

  ProcesamientoHander2:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Dos.."
      FunctionName: dos
      CodeUri: testing_cicd/
      Handler: handler.handler2
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn

  ProcesamientoHander3:
    Type: AWS::Serverless::Function
    Properties:
      Description: "El pepe.."
      FunctionName: tres
      CodeUri: testing_cicd/
      Handler: handler.handler3
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn

  ProcesamientoFallback:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Envia alerta de falla de ejecucion step"
      FunctionName: fallback
      CodeUri: codes-fallback/
      Handler: fail.fail
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn

  StateExcutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Role-StateExcutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "StatesExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt ProcesamientoHander1.Arn
                  - !GetAtt ProcesamientoHander2.Arn
                  - !GetAtt ProcesamientoHander3.Arn
                  - !GetAtt ProcesamientoFallback.Arn

  StepExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Role-StepExecution
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: StateMachineExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "states:StartExecution"
                Resource:
                  - !Ref WorkFlow


  StepExecution:
    Type: AWS::Events::Rule
    Properties:
      Description: "Testeando una step para cicd"
      Name: Rule-ExecutionStep
      ScheduleExpression: rate(2 minutes)
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref WorkFlow
          Id: !GetAtt WorkFlow.Name
          RoleArn: !GetAtt StepExecutionRole.Arn

  WorkFlow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: state-StateMachine
      RoleArn: !GetAtt StateExcutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Primera lambda de ejecuci√≥n",
          "StartAt": "Handler1",
          "States": {
            "Handler1": {
              "Type": "Task",
              "Resource": "${ProcesamientoHander1.Arn}",
              "Next": "Handler2",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Fallback"
                }]
            },
            "Handler2": {
              "Type": "Task",
              "Resource": "${ProcesamientoHander2.Arn}",
              "Next": "Handler3",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Fallback"
                }]
            },
            "Handler3": {
              "Type": "Task",
              "Resource": "${ProcesamientoHander3.Arn}",
              "End": true
            },
            "Fallback": {
              "Type": "Task",
              "Resource": "${ProcesamientoFallback.Arn}",
              "End": true
            }
          }
        }

Outputs:

  Handler1:
    Value: !Ref ProcesamientoHander1
    Description: 'Funcion 1'
    Export:
        Name: "uno"

  Handler2:
    Value: !Ref ProcesamientoHander2
    Description: 'Funcion 2'
    Export:
        Name: "dos"

  Handler3:
    Value: !Ref ProcesamientoHander3
    Description: 'Funcion 3'
    Export:
        Name: "tres"

  Refresh:
    Value: !Ref ProcesamientoFallback
    Description: 'Fallback'
    Export:
        Name: "fallback"

