AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'step-functions-testeo

  Sample SAM Template for cosmos-report

  '
Globals:
  Function:
    MemorySize: 512
    Timeout: 60
    Environment:
      Variables:
        funcionpredictv2:
          Ref: funcionpredict
        inputbucket:
          Ref: InputBucketName
        outputbucket:
          Ref: OutputBucketName
        dynamodbadsv2:
          Ref: ADSNamev2
        buckettrain:
          Ref: TrainBucketName
        StatusDataSource:
          Ref: StatusDataSource
Parameters:
  funcionpredict:
    Type: String
    Default: predict-fuel-v2-Predict
  InputBucketName:
    Type: String
    Default: cosmos-anglo-bronces-entrada
  OutputBucketName:
    Type: String
    Default: cosmos-anglo-bronces-salida
  ADSNamev2:
    Type: String
    Default: ADS-cosmos-anglo-v2
  TrainBucketName:
    Type: String
    Default: cosmos-anglo-bronces-train
  StatusDataSource:
    Type: String
    Default: StatusDataSource
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Policies:
      - PolicyName: WriteCloudWatchLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AllAccessOnS3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:*
            Resource: '*'
      - PolicyName: FullOnDynamoDBO
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            - dax:*
            Resource: '*'
      - PolicyName: allowLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:*
            Resource: '*'
      - PolicyName: allowAPIManage
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:ManageConnections
            Resource: '*'
  ProcesamientoHander1:
    Type: AWS::Serverless::Function
    Properties:
      Description: Uno..
      FunctionName:
        Fn::Sub: ${AWS::StackName}-uno
      CodeUri: ProcesamientoHander1
      Handler: handler.handler1
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
  ProcesamientoHander2:
    Type: AWS::Serverless::Function
    Properties:
      Description: Dos..
      FunctionName:
        Fn::Sub: ${AWS::StackName}-dos
      CodeUri: ProcesamientoHander2
      Handler: handler.handler2
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
  ProcesamientoHander3:
    Type: AWS::Serverless::Function
    Properties:
      Description: El pepe..
      FunctionName:
        Fn::Sub: ${AWS::StackName}-tres
      CodeUri: ProcesamientoHander3
      Handler: handler.handler3
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
  ProcesamientoFallback:
    Type: AWS::Serverless::Function
    Properties:
      Description: Envia alerta de falla de ejecucion step
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Fallback
      CodeUri: ProcesamientoFallback
      Handler: fail.fail
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
  StateExcutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-Role-StateExcutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
            - Fn::GetAtt:
              - ProcesamientoHander1
              - Arn
            - Fn::GetAtt:
              - ProcesamientoHander2
              - Arn
            - Fn::GetAtt:
              - ProcesamientoHander3
              - Arn
            - Fn::GetAtt:
              - ProcesamientoFallback
              - Arn
  StepExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${AWS::StackName}-Role-StepExecution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: StateMachineExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: states:StartExecution
            Resource:
            - Ref: WorkFlow
  StepExecution:
    Type: AWS::Events::Rule
    Properties:
      Description: Testeando una step para cicd
      Name:
        Fn::Sub: ${AWS::StackName}-Rule-ExecutionStep
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Ref: WorkFlow
        Id:
          Fn::GetAtt:
          - WorkFlow
          - Name
        RoleArn:
          Fn::GetAtt:
          - StepExecutionRole
          - Arn
  WorkFlow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: ${AWS::StackName}-state-StateMachine
      RoleArn:
        Fn::GetAtt:
        - StateExcutionRole
        - Arn
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Primera lambda de ejecuci\xF3n\",\n  \"StartAt\"\
          : \"Handler1\",\n  \"States\": {\n    \"Handler1\": {\n      \"Type\": \"\
          Task\",\n      \"Resource\": \"${ProcesamientoHander1.Arn}\",\n      \"\
          Next\": \"Handler2\",\n      \"Catch\": [{\n        \"ErrorEquals\": [\"\
          States.ALL\"],\n        \"Next\": \"Fallback\"\n        }]\n    },\n   \
          \ \"Handler2\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ProcesamientoHander2.Arn}\"\
          ,\n      \"Next\": \"Handler3\",\n      \"Catch\": [{\n        \"ErrorEquals\"\
          : [\"States.ALL\"],\n        \"Next\": \"Fallback\"\n        }]\n    },\n\
          \    \"Handler3\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"\
          ${ProcesamientoHander3.Arn}\",\n      \"End\": true\n    },\n    \"Fallback\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ProcesamientoFallback.Arn}\"\
          ,\n      \"End\": true\n    }\n  }\n}\n"
Outputs:
  Handleer1:
    Value:
      Ref: ProcesamientoHander1
    Description: Funcion 1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-uno
  ADSLoadFunction:
    Value:
      Ref: ProcesamientoHander2
    Description: Funcion 2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-dos
  Refresh:
    Value:
      Ref: ProcesamientoHander3
    Description: Funcion 3
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-tres
